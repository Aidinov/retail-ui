import defaultThemeVariables from '../components/variables.less';
import flatThemeVariables from '../components/variables.flat.less';
<<<<<<< HEAD
=======
import Upgrades from './Upgrades';
import { Mutable } from "../typings/utility-types";
>>>>>>> refactor(ThemeManager): add types

type VariablesObject = typeof defaultThemeVariables;

type ThemeType = 'default' | 'flat';

export interface DynamicStylesType {
  [key: string]: (theme: VariablesObject) => string;
}

export default class ThemeManager {
  public static getVariables(themeType: ThemeType): VariablesObject {
    if (themeType === 'default') {
      return this.defaultThemeVariables;
    }

    if (themeType === 'flat') {
      return this.flatThemeVariables;
    }

    throw new Error(`Incompatible them type in argument: ${themeType}`);
  }

  public static overrideVariables(themeType: ThemeType, themeObject: VariablesObject) {
    if (themeType === 'default') {
      this.defaultThemeVariables = { ...this.defaultThemeVariables, ...themeObject };
    }

    if (themeType === 'flat') {
      this.flatThemeVariables = { ...this.flatThemeVariables, ...themeObject };
    }
  }

<<<<<<< HEAD
  public static resetVariablesToDefaultValues(themeType: ThemeType): VariablesObject {
    if (themeType === 'default') {
      this.defaultThemeVariables = defaultThemeVariables;
      return this.defaultThemeVariables;
    }

    if (themeType === 'flat') {
      this.flatThemeVariables = flatThemeVariables;
      return this.flatThemeVariables;
    }

    throw new Error(`Incompatible them type in argument: ${themeType}`);
=======
  private static isFlatDesign: boolean = Upgrades.isFlatDesignEnabled();
  private static variablesConstructed: boolean = false;
  private static variables: VariablesObject = {} as VariablesObject;

  private static constructVariablesObject() {
    const bothThemesKeys = [...Object.keys(defaultThemeVariables), ...Object.keys(flatThemeVariables)] as Array<
      keyof VariablesObject
    >;

    this.variables = bothThemesKeys.reduce(
      (resultObj: Mutable<VariablesObject>, currentKey: keyof VariablesObject) => {
        if (this.isFlatDesign) {
          resultObj[currentKey] = (flatThemeVariables as IndexSignature)[currentKey];
        } else {
          resultObj[currentKey] = (defaultThemeVariables as IndexSignature)[currentKey];
        }
        return resultObj as VariablesObject;
      },
      {} as VariablesObject,
    );
    this.variablesConstructed = true;
>>>>>>> refactor(ThemeManager): add types
  }

  private static defaultThemeVariables: VariablesObject = defaultThemeVariables;
  private static flatThemeVariables: VariablesObject = flatThemeVariables;
}
